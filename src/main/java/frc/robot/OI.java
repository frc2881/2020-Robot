// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc.robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton driverGreenTriangle;
public JoystickButton driverBlueX;
public JoystickButton driverPinkSquare;
public JoystickButton driverRedCircle;
public JoystickButton driverPOV;
public JoystickButton driverOption;
public JoystickButton driverButton;
public Joystick driverButtons;
public Joystick driverJoysticks;
public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

joystick1 = new Joystick(2);

driverJoysticks = new Joystick(1);

driverButtons = new Joystick(0);

driverButton = new JoystickButton(driverButtons, 1);
driverButton.whileHeld(new DoNothing());
driverOption = new JoystickButton(driverButtons, 1);
driverOption.whileHeld(new DoNothing());
driverPOV = new JoystickButton(driverButtons, 1);
driverPOV.whileHeld(new DoNothing());
driverRedCircle = new JoystickButton(driverButtons, 1);
driverRedCircle.whileHeld(new DoNothing());
driverPinkSquare = new JoystickButton(driverButtons, 1);
driverPinkSquare.whileHeld(new DoNothing());
driverBlueX = new JoystickButton(driverButtons, 1);
driverBlueX.whileHeld(new DoNothing());
driverGreenTriangle = new JoystickButton(driverButtons, 1);
driverGreenTriangle.whileHeld(new DoNothing());


        // SmartDashboard Buttons
        SmartDashboard.putData("Arm Control", new ArmControl());
        SmartDashboard.putData("Angle Calibrate Encoder", new AngleCalibrateEncoder());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Do Nothing", new DoNothing());
        SmartDashboard.putData("Drive With Joysticks", new DriveWithJoysticks());
        SmartDashboard.putData("Intake Control Rollers", new IntakeControlRollers());
        SmartDashboard.putData("Lift Control", new LiftControl());
        SmartDashboard.putData("Lift To Height", new LiftToHeight());
        SmartDashboard.putData("Set Arm Angle", new SetArmAngle());
        SmartDashboard.putData("Rendezvous", new Rendezvous());
        SmartDashboard.putData("Trench Prep", new TrenchPrep());
        SmartDashboard.putData("Robot Prep", new RobotPrep());
        SmartDashboard.putData("TWINKLES", new TWINKLES());
        SmartDashboard.putData("Rumble Driver", new RumbleDriver());
        SmartDashboard.putData("Rumble Joysticks", new RumbleJoysticks());
        SmartDashboard.putData("Rumble Yes", new RumbleYes());
        SmartDashboard.putData("Rumble No", new RumbleNo());
        SmartDashboard.putData("Intake Set As Front", new IntakeSetAsFront());
        SmartDashboard.putData("Intake Set As Back", new IntakeSetAsBack());
        SmartDashboard.putData("Camera Switch", new CameraSwitch());
        SmartDashboard.putData("Wait Forever", new WaitForever());
        SmartDashboard.putData("Wait For Pressure", new WaitForPressure());
        SmartDashboard.putData("Power Cell Control", new PowerCellControl());
        SmartDashboard.putData("Power Cell Set Roller", new PowerCellSetRoller());
        SmartDashboard.putData("Power Cell Control Rollers", new PowerCellControlRollers());
        SmartDashboard.putData("Power Cell Intake", new PowerCellIntake());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getDriverButtons() {
        return driverButtons;
    }

public Joystick getDriverJoysticks() {
        return driverJoysticks;
    }

public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

