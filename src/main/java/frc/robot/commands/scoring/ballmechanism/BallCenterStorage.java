// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands.scoring.ballmechanism;

import edu.wpi.first.wpilibj.command.CommandGroup;
import frc.robot.Robot;
import frc.robot.commands.scoring.ballmechanism.ArmAligningControl.Direction;
//import frc.robot.commands.scoring.ballmechanism.ArmAligningControl;
import frc.robot.commands.scoring.ballmechanism.ArmAligningControl.Alignment;


/**
 *
 */
public class BallCenterStorage extends CommandGroup {
        double speed;
    public BallCenterStorage(Alignment state, Direction state1) {

        requires(Robot.ballStorage);

        addSequential(new ArmAligningControl(state, state1));
        addSequential(new IntakeFor7Inches());
        //currently only stores 3 power cells
        Robot.ballStorage.morePC(this);

        /*addSequential(new ArmAligningControl(state, state1));
        if(state1 == Direction.CENTER)
        addSequential(new IntakeFor7Inches());
        if(Robot.oi.getManipulatorLeftY() == );
        Robot.ballStorage.ballCenterStorageLimit(state, state1, speed);*/
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    
    protected void initialize() {
        Robot.logInitialize(this);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Robot.ballStorage.getPCCounter() >= 3;
    }

    // Called once after isFinished returns true
    @Override
    protected void interrupted() {
        Robot.logInterrupted(this);

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void end() {
        Robot.logEnd(this);
    }
}
