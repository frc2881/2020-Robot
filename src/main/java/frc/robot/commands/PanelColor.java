// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;

import com.revrobotics.ColorMatchResult;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;


/**
 *
 */
public class PanelColor extends Command {

    ColorMatchResult filteredColor;
    int counter;
    ColorMatchResult matchColor;
    String gameData = DriverStation.getInstance().getGameSpecificMessage();
    /*ColorMatchResult currentColor;
    int itr;*/
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public PanelColor() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    /*ColorMatchResult filteredColor;
    int counter;
    int colorChange;*/

    requires(Robot.controlPanel);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        filteredColor = Robot.controlPanel.getColor();
        counter = 0;
        Robot.controlPanel.spinMotor(.5);
        /*Robot.controlPanel.spinMotor(.5);
        itr = 0;*/
        matchColor = Robot.controlPanel.gameColor(gameData);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        ColorMatchResult currentColor = Robot.controlPanel.getColor();
        if(currentColor != filteredColor)
        {
            counter++;
            if(counter == 3)
            {
                filteredColor = currentColor;
                counter = 0;
            }
        }
        else
        {
            counter = 0;
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return matchColor == filteredColor;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.controlPanel.spinMotor(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
