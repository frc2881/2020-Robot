// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.controller.PIDController;
import frc.robot.Robot;

/**
 *
 */
public class DriveForDistance extends Command {
    private double distance;
    private PIDController straightPID;
    //using the Ziegler-Nichols straightPID Control Tuning method, we find the proper numbers for the PID loop.
    private static final double Kc = 0.08;
    private static final double Pc = 0.291666;  // period of oscillation (found from average devided by 1/8 of a second(slow mo' camera))
    private static final double P = 0.6 * Kc; 
    private static final double I = 2 * P * 0.05 / Pc;
    private static final double D = 0.125 * P * Pc / 0.05;

    public DriveForDistance(double distanceFeet) {
        requires(Robot.drive);
        this.distance = distanceFeet * 12;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        /* Make a call to the subsystem to use a straightPID loop controller in the subsystem
        to set the heading based on the HAT controller. */
        Robot.logInitialize(this);
        Robot.log("Starting to drive autonomously for " + distance/12 + " feet!");
        straightPID = new PIDController(2, 0, 0);// to be tested
        straightPID.setSetpoint(distance);
        straightPID.setTolerance(2);
        Robot.drive.resetDriveEncoders();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // Calls to the subsystem to update the angle if controller value has changed
        // Robot.drive.autonomousRotate(rotateToAngleRate, -rotateToAngleRate);
        double value = straightPID.calculate(Robot.drive.getDrivePosition());
       // Sets the minimum and maximum speed of the robot during the command 
       if (value > 0.5) {
           value = 0.5;
       } else if (value < -0.5) {
           value = -0.5;
       } else if (Math.abs(value) < 0.05) {
           value = 0;
       }

        Robot.drive.tankDrive(value, value);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        // asking the straightPID loop have we reached our position
        return straightPID.atSetpoint();
    }

    @Override
    protected void interrupted() {
        Robot.logInterrupted(this);
        // call the drive subsystem to make sure the straightPID loop is disabled
        Robot.drive.tankDrive(0, 0);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.logEnd(this);
        // call the drive subsystem to make sure the straightPID loop is disabled
        Robot.drive.tankDrive(0, 0);
    }

}
