// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilder;
import frc.robot.Robot;
import edu.wpi.first.wpilibj.GenericHID;
/**
 *
 */
public class DriveForDistance extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double speedSole = 0.58;
    private double distance;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveForDistance(double distance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        super(computeTimeout(distance));
        requires(Robot.drive);
        this.distance = distance;        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    private static double computeTimeout(double distance) {
        //Give the robot 1 second to get started then assume it travels at 3 ft/second (in practice it's faster)
        return 1.0 + (Math.abs(distance) / 3.0);
    }


    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.log("Autonomous driving " + distance + " ft: " + Robot.drive.getLocation());
        Robot.drive.initializeDriveForward(distance, 0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double speed = Robot.drive.getStraightSpeed();

        //So DriveForward won't time out (it goes backwards fast enough to make a difference)
        if(Math.abs(speed) < speedSole) {
            speed = Math.copySign(speedSole, speed);
        }

        double rotate = Robot.drive.getRotateToAngleRate();
        Robot.drive.autonomousArcadeDrive(speed, rotate);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (isTimedOut()) {
            Robot.log("Drive forward timed out:" + Robot.drive.getLocation());
            return true;
        }
        //asking the PID loop have we reached our position
        return Robot.drive.isFinishedDriveForward();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.drive.tankDrive(0, 0);
        Robot.logEnd(this);
        end();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drive.endDriveForward();
        Robot.log("Drive Forward has ended: " + Robot.drive.getLocation());
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    public void initSendable(SendableBuilder builder) {
        super.initSendable(builder);
        builder.addDoubleProperty("Drive Forward Distance", () -> distance, (distance) -> this.distance = distance);
    }
}
