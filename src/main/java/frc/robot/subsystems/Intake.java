// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax IntakeFlywheel;
    private CANSparkMax intakeLeft;
    private CANSparkMax intakeRight;
    private CANSparkMax intakeMain;
    private Spark flywheel;
    private Solenoid flywheelSolenoid;
    private Encoder colourWheelEncoder;
    private Spark angleAdjustment;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Flywheel
        IntakeFlywheel = new CANSparkMax(6, MotorType.kBrushless); 
        IntakeFlywheel.setInverted(false);
        IntakeFlywheel.setIdleMode(IdleMode.kCoast); // Agreed to keep it in coast mode

        // Align Arm Right
        intakeRight = new CANSparkMax(8, MotorType.kBrushless); 
        intakeRight.setInverted(false);
        intakeRight.setIdleMode(IdleMode.kBrake);

        // Align Arm Left
        intakeLeft = new CANSparkMax(9, MotorType.kBrushless); 
        intakeLeft.setInverted(true);
        intakeLeft.setIdleMode(IdleMode.kBrake);

        // Tube Intake
        intakeMain = new CANSparkMax(7, MotorType.kBrushless); 
        intakeMain.setInverted(false);
        intakeMain.setIdleMode(IdleMode.kBrake);

        flywheel = new Spark(8);
        addChild("Flywheel", flywheel);
        flywheel.setInverted(false);

        flywheelSolenoid = new Solenoid(0, 0);
        addChild("Flywheel Solenoid", flywheelSolenoid);

        colourWheelEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("Colour Wheel Encoder", colourWheelEncoder);
        colourWheelEncoder.setDistancePerPulse(1.0);
        colourWheelEncoder.setPIDSourceType(PIDSourceType.kRate);

        angleAdjustment = new Spark(9);
        addChild("Angle Adjustment", angleAdjustment);
        angleAdjustment.setInverted(false);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // setDefaultCommand(new ArmAligningControl());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public void armAlign(double left, double right) { // positive values make cells go in, negative goes out
        /*
         * if(left>-1&&right>-1){ intakeLeft.set(0); intakeRight.set(0); } else
         * if(left>-1){ intakeLeft.set((left+1)/2); intakeRight.set(0); } else
         * if(right>-1){ intakeRight.set((right+1)/2); intakeLeft.set(0); } else{
         * intakeRight.set(0); intakeLeft.set(0); }
         */
        intakeLeft.set(left);
        intakeRight.set(right);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
