// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import java.util.function.DoubleSupplier;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;
import frc.robot.commands.scoring.ballmechanism.ControlFeeder;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilder;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Intake extends Subsystem {
    
    public boolean intakeFeeder = true;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public enum RollerDirection {
        INTAKE, EJECT
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private CANSparkMax feeder;
    private Encoder colourWheelEncoder;
    private Spark angleAdjustment;
    private CANEncoder intakeMainEncoder;
    private DoubleSupplier intakeMainEncoderPosition;





    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        feeder = new CANSparkMax(10, MotorType.kBrushless); // 
        feeder.setInverted(false);
        feeder.setIdleMode(IdleMode.kCoast);

        feeder.setOpenLoopRampRate(1);

        intakeLeft = new CANSparkMax(9, MotorType.kBrushless); // Align Arm Left

        intakeLeft.setInverted(true);
        intakeLeft.setIdleMode(IdleMode.kBrake);

        intakeRight = new CANSparkMax(8, MotorType.kBrushless); // Align Arm Right

        intakeRight.setInverted(false);
        intakeRight.setIdleMode(IdleMode.kBrake);

        intakeMain = new CANSparkMax(7, MotorType.kBrushless); // Tube Intake

        intakeMain.setInverted(false);
        intakeMain.setIdleMode(IdleMode.kBrake);

        // 42 ticks per rotation, 7:1 gearbox - nine revolutions for one wheel
        // revolution, inch and a half diameter, 3/16 inch belt
        double ticksPerRevolution = encoderCountsPerRevolution;
        double gearRatio = lowestGearTeethNumber / highestGearTeethNumber;
        double wheelCircumference = wheelDiameter * Math.PI;
        double distancePerPulse = wheelCircumference / ticksPerRevolution / gearRatio;
        intakeMainEncoder = intakeMain.getEncoder();
        intakeMainEncoderPosition = () -> intakeMainEncoder.getPosition() * -distancePerPulse;

        colourWheelEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("Colour Wheel Encoder", colourWheelEncoder);
        colourWheelEncoder.setDistancePerPulse(1.0);
        colourWheelEncoder.setPIDSourceType(PIDSourceType.kRate);

        angleAdjustment = new Spark(9);
        addChild("Angle Adjustment", angleAdjustment);
        angleAdjustment.setInverted(false);

    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    @Override
    protected void initDefaultCommand() {
        // TODO Auto-generated method stub
        setDefaultCommand(new ControlFeeder());

    }

    public void controlFeeder(double speed) {
        //negative is intake
        feeder.set(speed);
    }

}
