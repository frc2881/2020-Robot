// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import java.util.function.DoubleSupplier;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilder;
import frc.robot.commands.scoring.lift.LiftControl;
import frc.robot.utils.DistancePerPulse;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Lift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private static final double highestGearTeethNumber = 4;
    private static final double lowestGearTeethNumber = 1;
    private static final double encoderCountsPerRevolution = 1;
    private static final double wheelDiameter = 0.5 / Math.PI;
    // Lead screw 0.5 inch travel per turn
    // 1 rev of motor = half rev of lead screw
    private CANSparkMax liftMotor;
    private CANSparkMax liftMotor2;
    private CANEncoder liftEncoder;

    private DoubleSolenoid liftSolenoid;

    private DoubleSupplier liftPosition;
    private static double distancePerPulse;
    private static double beginningPosition;

    public boolean readyForLift = false;

    public Lift() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        liftMotor = new CANSparkMax(13, MotorType.kBrushless);
        liftMotor.setInverted(true);
        liftMotor.setIdleMode(IdleMode.kBrake);

        liftMotor2 = new CANSparkMax(14, MotorType.kBrushless);
        liftMotor2.setInverted(true);
        liftMotor2.setIdleMode(IdleMode.kBrake);

        liftMotor2.follow(liftMotor);

        liftSolenoid = new DoubleSolenoid(11, 1, 0);
        addChild("Lift Solenoid", liftSolenoid);
        liftSolenoid.set(Value.kOff);

        liftEncoder = liftMotor.getEncoder();
        distancePerPulse = DistancePerPulse.get(highestGearTeethNumber, lowestGearTeethNumber,
                encoderCountsPerRevolution, wheelDiameter);
        beginningPosition = liftEncoder.getPosition() * distancePerPulse;
        liftPosition = () -> liftEncoder.getPosition() * distancePerPulse;// - beginningPosition;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void reset() {
        readyForLift = false;
        resetLiftSolenoid();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new LiftControl());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    @Override
    public void initSendable(SendableBuilder builder) {
        super.initSendable(builder);
        builder.addDoubleProperty("Height", this::getLiftPosition, null);
        builder.addBooleanProperty("Ready for Lift", this::readyForLift, null);
    }

    public boolean readyForLift() {
        return readyForLift;
    }

    public void setLiftSpeed(double speed) {
        if (Math.abs(speed) < 0.05) {
            liftMotor.set(0);
        } else {
            liftMotor.set(speed);
        }
    }

    public void setLiftSolenoidExtended() {
            
        liftSolenoid.set(Value.kForward);
    }

    public void resetLiftSolenoid() {
            
        liftSolenoid.set(Value.kReverse);
    }

    public double getLiftPosition() {
        return liftPosition.getAsDouble() - beginningPosition;
    }
}
