// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;

import java.util.function.DoubleSupplier;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Lift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax liftMotorLeft;
    private CANSparkMax liftMotorRight;
    private CANEncoder liftEncoderLeft;
    private CANEncoder liftEncoderRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSupplier liftLeftPosition;
    private DoubleSupplier liftRightPosition;
    private static double beginningPosition;

    public Lift() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        liftMotorLeft = new CANSparkMax(12, MotorType.kBrushless);
        liftMotorLeft.restoreFactoryDefaults(); 
        liftMotorLeft.setInverted(false);
        liftMotorLeft.setIdleMode(IdleMode.kBrake);

        liftMotorRight = new CANSparkMax(13, MotorType.kBrushless);
        liftMotorRight.restoreFactoryDefaults(); 
        liftMotorRight.setInverted(false);
        liftMotorRight.setIdleMode(IdleMode.kBrake);

        double distancePerPulse = 0;//DistancePerPulse.get(highestGearTeethNumber, lowestGearTeethNumber, encoderCountsPerRevolution, wheelDiameter);

        liftEncoderLeft = liftMotorLeft.getEncoder();
        liftLeftPosition = () -> liftEncoderLeft.getPosition() * distancePerPulse;

        liftEncoderRight = liftMotorRight.getEncoder();
        liftRightPosition = () -> liftEncoderRight.getPosition() * distancePerPulse;

        beginningPosition = (liftEncoderLeft.getPosition() + liftEncoderRight.getPosition()) / 2 * distancePerPulse;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
